// This file describes message prototypes used by services

syntax = "proto3";

package messages;

// Represents the request for the ECDSA reused nonce attack
message ReusedNonceAttackRequest {
  optional bytes pubkey_order = 1;
  optional bytes signature1 = 2;
  optional bytes signature2 = 3;
  optional bytes msg_hash1 = 4;
  optional bytes msg_hash2 = 5;
}

// Represents the responce for the ECDSA reused nonce attack
message ReusedNonceAttackResponse {
  optional bytes private_key = 1;
}

message TestMessage {
  optional bytes test_1 = 1;
  optional bool test_2 = 2;
  optional double test_3 = 3;
  optional float test_4 = 4;
  optional int64 test_5 = 5;
  AvailableServices services = 6;
  SubscribeMessage msg = 7;
}

/**
 * Represents list of available services, where key is the type of the service
 * attack and value is the attack name
 */
message AvailableServices {
  message AvailableService {
    optional PrimitiveType primitive_type = 1;
    optional string attack_name = 2;
    optional string address = 3;
    optional string service_name = 4;
    optional string description = 5;
  }
  repeated AvailableService services = 1;
}

// Empty message
message EmptyMessage {

}

enum PrimitiveType {
  PRIMITIVE_TYPE_UNSPECIFIED = 0;
  PRIMITIVE_TYPE_HASH = 1;
  PRIMITIVE_TYPE_DIGITAL_SIGNATURE = 2;
  PRIMITIVE_TYPE_SYMMETRIC = 3;
}

message SubscribeMessage {
  optional PrimitiveType primitive_type = 1;
  optional string attack_name = 2;
  optional int32 port = 3;
  optional string service_name = 4;
  optional string description = 5;
}
